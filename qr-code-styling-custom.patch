diff --git a/package.json b/package.json
index c05a3d2..db482ec 100644
--- a/package.json
+++ b/package.json
@@ -11,6 +11,7 @@
     "node": ">=18.18.0"
   },
   "dependencies": {
+    "jspdf": "^2.5.2",
     "qrcode-generator": "^1.4.4"
   },
   "devDependencies": {
diff --git a/src/constants/cornerDotTypes.ts b/src/constants/cornerDotTypes.ts
index f5c7b5b..aac6d29 100644
--- a/src/constants/cornerDotTypes.ts
+++ b/src/constants/cornerDotTypes.ts
@@ -2,5 +2,16 @@ import { CornerDotTypes } from "../types";
 
 export default {
   dot: "dot",
-  square: "square"
+  square: "square",
+  squareGrid: "square-grid",
+  squareRounded: "square-rounded",
+  rightBottomSquare: "square-right-bottom",
+  leftTopCircle: "circle-left-top",
+  rightBottomCircle: "circle-right-bottom",
+  diamond: "diamond",
+  star: "star",
+  plus: "plus",
+  cross: "cross",
+  rhombus: "rhombus",
+  leaf: "leaf"
 } as CornerDotTypes;
diff --git a/src/constants/cornerSquareTypes.ts b/src/constants/cornerSquareTypes.ts
index ac67ec2..da82fee 100644
--- a/src/constants/cornerSquareTypes.ts
+++ b/src/constants/cornerSquareTypes.ts
@@ -3,5 +3,12 @@ import { CornerSquareTypes } from "../types";
 export default {
   dot: "dot",
   square: "square",
-  extraRounded: "extra-rounded"
+  extraRounded: "extra-rounded",
+  dottedSquare:"dotted-square",
+  rightBottomSquare: "right-bottom-square",
+  leftTopSquare: "left-top-square",
+  leftTopCircle: "circle-left-top",
+  rightBottomCircle: "circle-right-bottom",
+  circleInSquare: "circle-in-square",
+  peanut: "peanut",
 } as CornerSquareTypes;
diff --git a/src/core/QRCodeStyling.ts b/src/core/QRCodeStyling.ts
index 269fd8e..d30cdee 100644
--- a/src/core/QRCodeStyling.ts
+++ b/src/core/QRCodeStyling.ts
@@ -10,6 +10,7 @@ import { FileExtension, QRCode, Options, DownloadOptions, ExtensionFunction, Win
 import qrcode from "qrcode-generator";
 import getMimeType from "../tools/getMimeType";
 import { Canvas as NodeCanvas, Image } from "canvas";
+import jsPDF from "jspdf";
 
 declare const window: Window;
 
@@ -76,7 +77,7 @@ export default class QRCodeStyling {
       const svg = this._svg;
       const xml = new this._window.XMLSerializer().serializeToString(svg);
       const svg64 = btoa(xml);
-      const image64 = `data:${getMimeType('svg')};base64,${svg64}`;
+      const image64 = `data:${getMimeType("svg")};base64,${svg64}`;
 
       if (this._options.nodeCanvas?.loadImage) {
         return this._options.nodeCanvas.loadImage(image64).then((image: Image) => {
@@ -196,7 +197,7 @@ export default class QRCodeStyling {
     } else {
       return new Promise((resolve) => {
         const canvas = element;
-        if ('toBuffer' in canvas) {
+        if ("toBuffer" in canvas) {
           // Different call is needed to prevent error TS2769: No overload matches this call.
           if (mimeType === "image/png") {
             resolve(canvas.toBuffer(mimeType));
@@ -207,8 +208,8 @@ export default class QRCodeStyling {
           } else {
             throw Error("Unsupported extension");
           }
-        } else if ('toBlob' in canvas) {
-          (canvas).toBlob(resolve, mimeType, 1);
+        } else if ("toBlob" in canvas) {
+          canvas.toBlob(resolve, mimeType, 1);
         }
       });
     }
@@ -248,6 +249,30 @@ export default class QRCodeStyling {
       source = '<?xml version="1.0" standalone="no"?>\r\n' + source;
       const url = `data:${getMimeType(extension)};charset=utf-8,${encodeURIComponent(source)}`;
       downloadURI(url, `${name}.svg`);
+    } else if (extension.toLowerCase() === "pdf") {
+      const canvas = element as HTMLCanvasElement;
+      const dataURL = canvas.toDataURL("image/png");
+    
+      const pdf = new jsPDF(); // Default orientation is 'portrait'
+    
+      // PDF page dimensions in mm
+      const pageWidth = pdf.internal.pageSize.getWidth();
+      const pageHeight = pdf.internal.pageSize.getHeight();
+    
+      // Adjust the QR code size (50% of the smaller dimension of the page)
+      const qrCodeSize = Math.min(pageWidth, pageHeight) * 0.5; // You can adjust this ratio as needed
+      const qrCodeX = (pageWidth - qrCodeSize) / 2; // X-coordinate to center the QR code
+      const qrCodeY = (pageHeight - qrCodeSize) / 2; // Y-coordinate to center the QR code
+    
+      // Adjust canvas size to match the QR code size
+      const imgWidth = qrCodeSize; 
+      const imgHeight = (canvas.height * imgWidth) / canvas.width; // Maintain aspect ratio
+    
+      // Add the QR code image to the PDF at the calculated position
+      pdf.addImage(dataURL, "PNG", qrCodeX, qrCodeY, imgWidth, imgHeight);
+    
+      // Save the PDF with the QR code
+      pdf.save(`${name}.pdf`);
     } else {
       const url = (element as HTMLCanvasElement).toDataURL(getMimeType(extension));
       downloadURI(url, `${name}.${extension}`);
diff --git a/src/figures/cornerDot/QRCornerDot.ts b/src/figures/cornerDot/QRCornerDot.ts
index b091280..236ee82 100644
--- a/src/figures/cornerDot/QRCornerDot.ts
+++ b/src/figures/cornerDot/QRCornerDot.ts
@@ -21,6 +21,36 @@ export default class QRCornerDot {
       case cornerDotTypes.square:
         drawFunction = this._drawSquare;
         break;
+      case cornerDotTypes.squareRounded:
+        drawFunction = this._drawSquareRounded;
+        break;
+      case cornerDotTypes.rightBottomSquare:
+        drawFunction = this._drawSquareRoundedRightBottomEdge;
+        break;
+      case cornerDotTypes.squareGrid:
+        drawFunction = this._drawSquareGrid;
+        break;
+      case cornerDotTypes.leftTopCircle:
+        drawFunction = this._drawCircleLeftTopEdge;
+        break;
+      case cornerDotTypes.rightBottomCircle:
+        drawFunction = this._drawCircleRightBottomEdge;
+        break;
+      case cornerDotTypes.diamond:
+        drawFunction = this._drawDiamond;
+        break;
+      case cornerDotTypes.star:
+        drawFunction = this._drawStar;
+        break;
+      case cornerDotTypes.plus:
+        drawFunction = this._drawPlus;
+        break;
+      case cornerDotTypes.cross:
+        drawFunction = this._drawCross;
+        break;
+      case cornerDotTypes.leaf:
+        drawFunction = this._drawSquareTopLeftExtended;
+        break;
       case cornerDotTypes.dot:
       default:
         drawFunction = this._drawDot;
@@ -66,6 +96,267 @@ export default class QRCornerDot {
     });
   }
 
+  _basicRoundedSquare(args: BasicFigureDrawArgs): void {
+    const { size, x, y } = args;
+
+    this._rotateFigure({
+      ...args,
+      draw: () => {
+        this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "rect");
+        this._element.setAttribute("x", String(x));
+        this._element.setAttribute("y", String(y));
+        this._element.setAttribute("width", String(size));
+        this._element.setAttribute("height", String(size));
+
+        // Set rounded corners
+        const cornerRadius = size / 4; // Adjust this value to control the roundness
+        this._element.setAttribute("rx", String(cornerRadius));
+        this._element.setAttribute("ry", String(cornerRadius));
+      }
+    });
+  }
+
+  _basicSquareGrid(args: BasicFigureDrawArgs): void {
+    const { size, x, y } = args;
+
+    // Calculate the size of each smaller square
+    const smallSize = size / 2;
+
+    this._rotateFigure({
+      ...args,
+      draw: () => {
+        for (let row = 0; row < 2; row++) {
+          for (let col = 0; col < 2; col++) {
+            // Create a smaller square for each grid position
+            const square = this._window.document.createElementNS("http://www.w3.org/2000/svg", "rect");
+            square.setAttribute("x", String(x + col * smallSize));
+            square.setAttribute("y", String(y + row * smallSize));
+            square.setAttribute("width", String(smallSize));
+            square.setAttribute("height", String(smallSize));
+
+            // Append the small square to the main element
+            this._element?.appendChild(square);
+          }
+        }
+      }
+    });
+  }
+
+  _basicRoundedSquareRightBottomEdge(args: BasicFigureDrawArgs): void {
+    const { size, x, y } = args;
+
+    this._rotateFigure({
+      ...args,
+      draw: () => {
+        this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path");
+
+        const cornerRadius = size / 4; // Adjust this value to control the roundness
+
+        // Create a path string for the square with rounded corners except the bottom-right corner
+        const pathData = `
+        M ${x} ${y + cornerRadius} 
+        Q ${x} ${y} ${x + cornerRadius} ${y} 
+        H ${x + size - cornerRadius} 
+        Q ${x + size} ${y} ${x + size} ${y + cornerRadius} 
+        V ${y + size} 
+        Q ${x + size} ${y + size} ${x + size - cornerRadius} ${y + size} 
+        H ${x + cornerRadius} 
+        Q ${x} ${y + size} ${x} ${y + size - cornerRadius} 
+        Z
+      `;
+        // Set the path data and create the element
+        this._element.setAttribute("d", pathData);
+      }
+    });
+  }
+
+  _basicCircleLeftTopEdge(args: BasicFigureDrawArgs): void {
+    const { size, x, y } = args;
+
+    this._rotateFigure({
+      ...args,
+      draw: () => {
+        this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path");
+
+        // Define radius of the circle
+        const radius = size / 2;
+
+        // Create a path string for the circle with a square corner at the top-left
+        const pathData = `
+          M ${x + radius} ${y} 
+          A ${radius} ${radius} 0 1 1 ${x + radius} ${y + size} 
+          A ${radius} ${radius} 0 1 1 ${x + radius} ${y} 
+          L ${x - radius} ${y + size} 
+          L ${x} ${y} 
+          Z
+        `;
+        // Set the path data and create the element
+        this._element.setAttribute("d", pathData);
+      }
+    });
+  }
+
+  _basicCircleRightBottomEdge(args: BasicFigureDrawArgs): void {
+    const { size, x, y } = args;
+
+    this._rotateFigure({
+      ...args,
+      draw: () => {
+        this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path");
+
+        // Define radius of the circle
+        const radius = size / 2;
+
+        // Create a path string for the circle with a square corner at the bottom-right
+        const pathData = `
+          M ${x + radius} ${y} 
+          A ${radius} ${radius} 0 1 1 ${x + radius} ${y + size} 
+          L ${x + size} ${y + size} 
+          L ${x + size} ${y + size - radius} 
+          A ${radius} ${radius} 0 1 1 ${x + radius} ${y} 
+          Z
+        `;
+        // Set the path data and create the element
+        this._element.setAttribute("d", pathData);
+      }
+    });
+  }
+
+  _basicDiamond(args: BasicFigureDrawArgs): void {
+    const { size, x, y } = args;
+
+    this._rotateFigure({
+      ...args,
+      draw: () => {
+        this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path");
+
+        // Create a path string for the diamond shape
+        const pathData = `
+          M ${x + size / 2} ${y} 
+          L ${x + size} ${y + size / 2} 
+          L ${x + size / 2} ${y + size} 
+          L ${x} ${y + size / 2} 
+          Z
+        `;
+        // Set the path data and create the element
+        this._element.setAttribute("d", pathData);
+      }
+    });
+  }
+
+  _basicStar(args: BasicFigureDrawArgs): void {
+    const { size, x, y } = args;
+
+    this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path");
+
+    // Create a path string for the star shape
+    const outerRadius = size / 2;
+    const innerRadius = outerRadius / 1.8;
+    const points = 5;
+    let pathData = "";
+
+    for (let i = 0; i < points * 2; i++) {
+      const angle = (i * Math.PI) / points - Math.PI / 2; // Adjust angle to start from the top
+      const radius = i % 2 === 0 ? outerRadius : innerRadius;
+      const xPos = x + size / 2 + radius * Math.cos(angle);
+      const yPos = y + size / 2 + radius * Math.sin(angle); // Adjust yPos calculation
+      pathData += i === 0 ? `M ${xPos},${yPos}` : `L ${xPos},${yPos}`;
+    }
+    pathData += " Z";
+
+    // Set the path data and create the element
+    this._element.setAttribute("d", pathData);
+  }
+
+  _basicPlus(args: BasicFigureDrawArgs): void {
+    const { size, x, y } = args;
+    const armWidth = size / 3; // Width of the arms of the plus shape
+
+    this._rotateFigure({
+      ...args,
+      draw: () => {
+        this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path");
+
+        // Create a path string for the plus shape
+        const pathData = `
+          M ${x + size / 2 - armWidth / 2} ${y} 
+          L ${x + size / 2 + armWidth / 2} ${y} 
+          L ${x + size / 2 + armWidth / 2} ${y + size} 
+          L ${x + size / 2 - armWidth / 2} ${y + size} 
+          Z
+          
+          M ${x} ${y + size / 2 - armWidth / 2} 
+          L ${x + size} ${y + size / 2 - armWidth / 2} 
+          L ${x + size} ${y + size / 2 + armWidth / 2} 
+          L ${x} ${y + size / 2 + armWidth / 2} 
+          Z
+        `;
+
+        // Set the path data and create the element
+        this._element.setAttribute("d", pathData);
+        this._element.setAttribute("fill", "black"); // Set fill color for visibility
+      }
+    });
+  }
+
+  _basicCross(args: BasicFigureDrawArgs): void {
+    const { size, x, y } = args;
+    const armWidth = size / 2.5; // Width of the arms of the cross shape
+
+    this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path");
+
+    // Create a path string for the cross shape
+    const pathData = `
+          M ${x + size / 2 - armWidth / 2} ${y} 
+          L ${x + size / 2 + armWidth / 2} ${y} 
+          L ${x + size / 2 + armWidth / 2} ${y + size} 
+          L ${x + size / 2 - armWidth / 2} ${y + size} 
+          Z
+          
+          M ${x} ${y + size / 2 - armWidth / 2} 
+          L ${x + size} ${y + size / 2 - armWidth / 2} 
+          L ${x + size} ${y + size / 2 + armWidth / 2} 
+          L ${x} ${y + size / 2 + armWidth / 2} 
+          Z
+        `;
+
+    // Set the path data and create the element
+    this._element.setAttribute("d", pathData);
+    this._element.setAttribute("fill", "black"); // Set fill color for visibility
+
+    // Rotate the path slightly to the right
+    const centerX = x + size / 2;
+    const centerY = y + size / 2;
+    this._element.setAttribute("transform", `rotate(45, ${centerX}, ${centerY})`);
+  }
+
+  _basicSquareTopLeftExtended(args: BasicFigureDrawArgs): void {
+    const { size, x, y } = args;
+    const extension = size / 4; // Adjust this value to control the extension from the top left side
+
+    this._rotateFigure({
+      ...args,
+      draw: () => {
+        this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path");
+
+        // Create a path string for the square shape with an extension from the top left side
+        const pathData = `
+          M ${x - extension} ${y - extension}
+          L ${x + size} ${y - extension}
+          L ${x + size} ${y + size}
+          L ${x} ${y + size}
+          L ${x} ${y}
+          L ${x - extension} ${y}
+          Z
+        `;
+
+        // Set the path data and create the element
+        this._element.setAttribute("d", pathData);
+      }
+    });
+  }
+
+
   _drawDot({ x, y, size, rotation }: DrawArgs): void {
     this._basicDot({ x, y, size, rotation });
   }
@@ -73,4 +364,34 @@ export default class QRCornerDot {
   _drawSquare({ x, y, size, rotation }: DrawArgs): void {
     this._basicSquare({ x, y, size, rotation });
   }
+  _drawSquareRounded({ x, y, size, rotation }: DrawArgs): void {
+    this._basicRoundedSquare({ x, y, size, rotation });
+  }
+  _drawSquareGrid({ x, y, size, rotation }: DrawArgs): void {
+    this._basicSquareGrid({ x, y, size, rotation });
+  }
+  _drawSquareRoundedRightBottomEdge({ x, y, size, rotation }: DrawArgs): void {
+    this._basicRoundedSquareRightBottomEdge({ x, y, size, rotation });
+  }
+  _drawCircleLeftTopEdge({ x, y, size, rotation }: DrawArgs): void {
+    this._basicCircleLeftTopEdge({ x, y, size, rotation });
+  }
+  _drawCircleRightBottomEdge({ x, y, size, rotation }: DrawArgs): void {
+    this._basicCircleRightBottomEdge({ x, y, size, rotation });
+  }
+  _drawDiamond({ x, y, size, rotation }: DrawArgs): void {
+    this._basicDiamond({ x, y, size, rotation });
+  }
+  _drawStar({ x, y, size, rotation }: DrawArgs): void {
+    this._basicStar({ x, y, size, rotation });
+  }
+  _drawPlus({ x, y, size, rotation }: DrawArgs): void {
+    this._basicPlus({ x, y, size, rotation });
+  }
+  _drawCross({ x, y, size, rotation }: DrawArgs): void {
+    this._basicCross({ x, y, size, rotation });
+  }
+  _drawSquareTopLeftExtended({ x, y, size, rotation }: DrawArgs): void {
+    this._basicSquareTopLeftExtended({ x, y, size, rotation });
+  }
 }
diff --git a/src/figures/cornerSquare/QRCornerSquare.ts b/src/figures/cornerSquare/QRCornerSquare.ts
index 2122c11..9463bf8 100644
--- a/src/figures/cornerSquare/QRCornerSquare.ts
+++ b/src/figures/cornerSquare/QRCornerSquare.ts
@@ -24,6 +24,27 @@ export default class QRCornerSquare {
       case cornerSquareTypes.extraRounded:
         drawFunction = this._drawExtraRounded;
         break;
+      case cornerSquareTypes.dottedSquare:
+        drawFunction = this._drawDottedSquare;
+        break;
+      case cornerSquareTypes.rightBottomSquare:
+        drawFunction = this._drawRoundedSquareRightBottomEdge;
+        break;
+      case cornerSquareTypes.leftTopSquare:
+        drawFunction = this._drawRoundedSquareLeftTopEdge;
+        break;
+        case cornerSquareTypes.circleInSquare:
+          drawFunction = this._drawCircleInSquare;
+          break;
+      case cornerSquareTypes.leftTopCircle:
+        drawFunction = this._drawCircleLeftTopFlat;
+        break;
+      case cornerSquareTypes.rightBottomCircle:
+        drawFunction = this._drawCircleRightBottomFlat;
+        break;
+      case cornerSquareTypes.peanut:
+        drawFunction = this._drawPeanutShape;
+        break;
       case cornerSquareTypes.dot:
       default:
         drawFunction = this._drawDot;
@@ -122,6 +143,411 @@ export default class QRCornerSquare {
     });
   }
 
+  _basicDottedSquare(args: BasicFigureDrawArgs): void {
+    const { size, x, y } = args;
+    const squareSize = size / 7;
+    const gap = squareSize * 1.2;
+
+    this._rotateFigure({
+      ...args,
+      draw: () => {
+        this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path");
+        this._element.setAttribute("clip-rule", "evenodd");
+        this._element.setAttribute("fill", "#000"); // Add this line to fill the squares
+
+        let pathData = "";
+        // Top edge
+        for (let i = 0; i <= size - squareSize; i += gap) {
+          pathData += `M ${x + i} ${y} h ${squareSize} v ${squareSize} h -${squareSize} z `;
+        }
+        // Right edge
+        for (let i = 0; i <= size - squareSize; i += gap) {
+          pathData += `M ${x + size - squareSize} ${y + i} h ${squareSize} v ${squareSize} h -${squareSize} z `;
+        }
+        // Bottom edge
+        for (let i = 0; i <= size - squareSize; i += gap) {
+          pathData += `M ${x + size - i - squareSize} ${y + size - squareSize} h ${squareSize} v ${squareSize} h -${squareSize} z `;
+        }
+        // Left edge
+        for (let i = 0; i <= size - squareSize; i += gap) {
+          pathData += `M ${x} ${y + size - i - squareSize} h ${squareSize} v ${squareSize} h -${squareSize} z `;
+        }
+        // Top-left corner
+        pathData += `M ${x} ${y} h ${squareSize} v ${squareSize} h -${squareSize} z `;
+        // Top-right corner
+        pathData += `M ${x + size - squareSize} ${y} h ${squareSize} v ${squareSize} h -${squareSize} z `;
+        // Bottom-right corner
+        pathData += `M ${x + size - squareSize} ${y + size - squareSize} h ${squareSize} v ${squareSize} h -${squareSize} z `;
+        // Bottom-left corner
+        pathData += `M ${x} ${y + size - squareSize} h ${squareSize} v ${squareSize} h -${squareSize} z `;
+
+        this._element.setAttribute("d", pathData);
+      }
+    });
+  }
+
+  _basicRoundedSquareRightBottomEdge(args: BasicFigureDrawArgs): void {
+    const { size, x, y, rotation = 0 } = args;
+    const radius = size / 3; // Adjust this value to control the rounding radius
+    const innerSquareSize = size / 1.4; // Size of the inner square
+    const innerSquareRadius = innerSquareSize / 4; // Radius for the inner square
+    const innerX = x + (size - innerSquareSize) / 2; // X position for the inner square
+    const innerY = y + (size - innerSquareSize) / 2; // Y position for the inner square
+
+    // Center coordinates for rotation
+    const cx = x + size / 2;
+    const cy = y + size / 2;
+
+    this._rotateFigure({
+      ...args,
+      draw: () => {
+        // Create the combined path for the outer and inner squares
+        const pathData =
+          `M ${x + radius} ${y}` + // Start at the top-left rounded corner
+          `H ${x + size - radius}` + // Draw a horizontal line to the right
+          `a ${radius} ${radius} 0 0 1 ${radius} ${radius}` + // Draw the top-right arc
+          `V ${y + size - radius}` + // Draw a vertical line down to the bottom-right flat edge
+          `H ${x + size}` + // Move to the bottom-right flat edge
+          `V ${y + size}` + // Draw a vertical line down to the bottom
+          `H ${x + radius}` + // Draw a horizontal line to the left
+          `a ${radius} ${radius} 0 0 1 -${radius} -${radius}` + // Draw the bottom-left arc
+          `V ${y + radius}` + // Draw a vertical line up to the starting point
+          `a ${radius} ${radius} 0 0 1 ${radius} -${radius}` + // Draw the top-left arc
+          `Z` + // Close the outer path
+          `M ${innerX + innerSquareRadius} ${innerY}` + // Start at the top-left rounded corner of the inner square
+          `H ${innerX + innerSquareSize - innerSquareRadius}` + // Draw a horizontal line to the right
+          `a ${innerSquareRadius} ${innerSquareRadius} 0 0 1 ${innerSquareRadius} ${innerSquareRadius}` + // Draw the top-right arc
+          `V ${innerY + innerSquareSize - innerSquareRadius}` + // Draw a vertical line down to the bottom-right flat edge
+          `H ${innerX + innerSquareSize}` + // Move to the bottom-right flat edge
+          `V ${innerY + innerSquareSize}` + // Draw a vertical line down to the bottom
+          `H ${innerX + innerSquareRadius}` + // Draw a horizontal line to the left
+          `a ${innerSquareRadius} ${innerSquareRadius} 0 0 1 -${innerSquareRadius} -${innerSquareRadius}` + // Draw the bottom-left arc
+          `V ${innerY + innerSquareRadius}` + // Draw a vertical line up to the starting point
+          `a ${innerSquareRadius} ${innerSquareRadius} 0 0 1 ${innerSquareRadius} -${innerSquareRadius}` + // Draw the top-left arc
+          `Z`; // Close the inner path
+
+        this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path");
+        this._element.setAttribute("clip-rule", "evenodd");
+        this._element.setAttribute("d", pathData);
+        this._element.setAttribute("fill", "none"); // Set fill to none for the outer shape
+        this._element.setAttribute("stroke", "black"); // Set the stroke color
+        this._element.setAttribute("stroke-width", "1"); // Set the stroke width
+
+        // Create the inner square path
+        const innerPath = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path");
+        innerPath.setAttribute("clip-rule", "evenodd");
+        innerPath.setAttribute(
+          "d",
+          `M ${innerX + innerSquareRadius} ${innerY}` + // Start at the top-left rounded corner
+            `H ${innerX + innerSquareSize - innerSquareRadius}` + // Draw a horizontal line to the right
+            `a ${innerSquareRadius} ${innerSquareRadius} 0 0 1 ${innerSquareRadius} ${innerSquareRadius}` + // Draw the top-right arc
+            `V ${innerY + innerSquareSize - innerSquareRadius}` + // Draw a vertical line down to the bottom-right flat edge
+            `H ${innerX + innerSquareSize}` + // Move to the bottom-right flat edge
+            `V ${innerY + innerSquareSize}` + // Draw a vertical line down to the bottom
+            `H ${innerX + innerSquareRadius}` + // Draw a horizontal line to the left
+            `a ${innerSquareRadius} ${innerSquareRadius} 0 0 1 -${innerSquareRadius} -${innerSquareRadius}` + // Draw the bottom-left arc
+            `V ${innerY + innerSquareRadius}` + // Draw a vertical line up to the starting point
+            `a ${innerSquareRadius} ${innerSquareRadius} 0 0 1 ${innerSquareRadius} -${innerSquareRadius}` + // Draw the top-left arc
+            `Z`
+        );
+        innerPath.setAttribute("transform", `rotate(${(rotation * 180) / Math.PI}, ${cx}, ${cy})`);
+        innerPath.setAttribute("fill", "white"); // Set fill to white for the inner square
+
+        // Append the elements to the SVG container
+        this._element.appendChild(innerPath);
+      }
+    });
+  }
+
+  _basicRoundedSquareLeftTopEdge(args: BasicFigureDrawArgs): void {
+    const { size, x, y, rotation = 0 } = args;
+    const radius = size / 3; // Adjust this value to control the rounding radius
+    const innerSquareSize = size / 1.4; // Size of the inner square
+    const innerSquareRadius = innerSquareSize / 4; // Radius for the inner square
+    const innerX = x + (size - innerSquareSize) / 2; // X position for the inner square
+    const innerY = y + (size - innerSquareSize) / 2; // Y position for the inner square
+
+    // Center coordinates for rotation
+    const cx = x + size / 2;
+    const cy = y + size / 2;
+
+    this._rotateFigure({
+      ...args,
+      draw: () => {
+        // Create the combined path for the outer and inner squares
+        const pathData =
+          `M ${x} ${y}` + // Start at the top-left sharp corner
+          `H ${x + size - radius}` + // Draw a horizontal line to the right
+          `a ${radius} ${radius} 0 0 1 ${radius} ${radius}` + // Draw the top-right arc
+          `V ${y + size - radius}` + // Draw a vertical line down to the bottom-right flat edge
+          `a ${radius} ${radius} 0 0 1 -${radius} ${radius}` + // Draw the bottom-right arc
+          `H ${x + radius}` + // Draw a horizontal line to the left
+          `a ${radius} ${radius} 0 0 1 -${radius} -${radius}` + // Draw the bottom-left arc
+          `V ${y}` + // Draw a vertical line up to the starting point
+          `Z` + // Close the outer path
+          `M ${innerX} ${innerY}` + // Start at the top-left sharp corner of the inner square
+          `H ${innerX + innerSquareSize - innerSquareRadius}` + // Draw a horizontal line to the right
+          `a ${innerSquareRadius} ${innerSquareRadius} 0 0 1 ${innerSquareRadius} ${innerSquareRadius}` + // Draw the top-right arc
+          `V ${innerY + innerSquareSize - innerSquareRadius}` + // Draw a vertical line down to the bottom-right flat edge
+          `a ${innerSquareRadius} ${innerSquareRadius} 0 0 1 -${innerSquareRadius} ${innerSquareRadius}` + // Draw the bottom-right arc
+          `H ${innerX + innerSquareRadius}` + // Draw a horizontal line to the left
+          `a ${innerSquareRadius} ${innerSquareRadius} 0 0 1 -${innerSquareRadius} -${innerSquareRadius}` + // Draw the bottom-left arc
+          `V ${innerY}` + // Draw a vertical line up to the starting point
+          `Z`; // Close the inner path
+
+        this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path");
+        this._element.setAttribute("clip-rule", "evenodd");
+        this._element.setAttribute("d", pathData);
+        this._element.setAttribute("fill", "none"); // Set fill to none for the outer shape
+        this._element.setAttribute("stroke", "black"); // Set the stroke color
+        this._element.setAttribute("stroke-width", "1"); // Set the stroke width
+
+        // Create the inner square path
+        const innerPath = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path");
+        innerPath.setAttribute("clip-rule", "evenodd");
+        innerPath.setAttribute(
+          "d",
+          `M ${innerX} ${innerY}` + // Start at the top-left sharp corner
+            `H ${innerX + innerSquareSize - innerSquareRadius}` + // Draw a horizontal line to the right
+            `a ${innerSquareRadius} ${innerSquareRadius} 0 0 1 ${innerSquareRadius} ${innerSquareRadius}` + // Draw the top-right arc
+            `V ${innerY + innerSquareSize - innerSquareRadius}` + // Draw a vertical line down to the bottom-right flat edge
+            `a ${innerSquareRadius} ${innerSquareRadius} 0 0 1 -${innerSquareRadius} ${innerSquareRadius}` + // Draw the bottom-right arc
+            `H ${innerX + innerSquareRadius}` + // Draw a horizontal line to the left
+            `a ${innerSquareRadius} ${innerSquareRadius} 0 0 1 -${innerSquareRadius} -${innerSquareRadius}` + // Draw the bottom-left arc
+            `V ${innerY}` + // Draw a vertical line up to the starting point
+            `Z`
+        );
+        innerPath.setAttribute("transform", `rotate(${(rotation * 180) / Math.PI}, ${cx}, ${cy})`);
+        innerPath.setAttribute("fill", "white"); // Set fill to white for the inner square
+
+        // Append the elements to the SVG container
+        this._element.appendChild(innerPath);
+      }
+    });
+  }
+
+  _basicLeftTopCircle(args: BasicFigureDrawArgs): void {
+    const { size, x, y, rotation = 0 } = args;
+    const radius = size / 2; // Radius for the outer circle
+    const innerRadius = radius / 1.4; // Radius for the inner circle
+    const innerX = x + (size - innerRadius * 2) / 2; // X position for the inner circle
+    const innerY = y + (size - innerRadius * 2) / 2; // Y position for the inner circle
+
+    // Center coordinates for rotation
+    const cx = x + size / 2;
+    const cy = y + size / 2;
+
+    this._rotateFigure({
+      ...args,
+      draw: () => {
+        // Create the combined path for the outer and inner circles
+        const pathData =
+          `M ${x} ${y}` + // Start at the top-left sharp corner
+          `H ${x + radius}` + // Draw a horizontal line to the right
+          `A ${radius} ${radius} 0 0 1 ${x + size} ${y + radius}` + // Draw the top-right arc
+          `A ${radius} ${radius} 0 0 1 ${x + radius} ${y + size}` + // Draw the bottom-right arc
+          `A ${radius} ${radius} 0 0 1 ${x} ${y + radius}` + // Draw the bottom-left arc
+          `V ${y}` + // Draw a vertical line up to the starting point
+          `Z` + // Close the outer path
+          `M ${innerX} ${innerY}` + // Start at the top-left sharp corner of the inner circle
+          `H ${innerX + innerRadius}` + // Draw a horizontal line to the right
+          `A ${innerRadius} ${innerRadius} 0 0 1 ${innerX + innerRadius * 2} ${innerY + innerRadius}` + // Draw the top-right arc
+          `A ${innerRadius} ${innerRadius} 0 0 1 ${innerX + innerRadius} ${innerY + innerRadius * 2}` + // Draw the bottom-right arc
+          `A ${innerRadius} ${innerRadius} 0 0 1 ${innerX} ${innerY + innerRadius}` + // Draw the bottom-left arc
+          `V ${innerY}` + // Draw a vertical line up to the starting point
+          `Z`; // Close the inner path
+
+        this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path");
+        this._element.setAttribute("clip-rule", "evenodd");
+        this._element.setAttribute("d", pathData);
+        this._element.setAttribute("fill", "none"); // Set fill to none for the outer shape
+        this._element.setAttribute("stroke", "black"); // Set the stroke color
+        this._element.setAttribute("stroke-width", "1"); // Set the stroke width
+
+        // Create the inner circle path
+        const innerPath = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path");
+        innerPath.setAttribute("clip-rule", "evenodd");
+        innerPath.setAttribute(
+          "d",
+          `M ${innerX} ${innerY}` + // Start at the top-left sharp corner
+            `H ${innerX + innerRadius}` + // Draw a horizontal line to the right
+            `A ${innerRadius} ${innerRadius} 0 0 1 ${innerX + innerRadius * 2} ${innerY + innerRadius}` + // Draw the top-right arc
+            `A ${innerRadius} ${innerRadius} 0 0 1 ${innerX + innerRadius} ${innerY + innerRadius * 2}` + // Draw the bottom-right arc
+            `A ${innerRadius} ${innerRadius} 0 0 1 ${innerX} ${innerY + innerRadius}` + // Draw the bottom-left arc
+            `V ${innerY}` + // Draw a vertical line up to the starting point
+            `Z`
+        );
+        innerPath.setAttribute("transform", `rotate(${(rotation * 180) / Math.PI}, ${cx}, ${cy})`);
+        innerPath.setAttribute("fill", "white"); // Set fill to white for the inner circle
+
+        // Append the elements to the SVG container
+        this._element.appendChild(innerPath);
+      }
+    });
+  }
+
+  _basicRightBottomCircle(args: BasicFigureDrawArgs): void {
+    const { size, x, y, rotation = 0 } = args;
+    const radius = size / 2; // Radius for the outer circle
+    const innerRadius = radius / 1.4; // Radius for the inner circle
+    const innerX = x + (size - innerRadius * 2) / 2; // X position for the inner circle
+    const innerY = y + (size - innerRadius * 2) / 2; // Y position for the inner circle
+
+    // Center coordinates for rotation
+    const cx = x + size / 2;
+    const cy = y + size / 2;
+
+    this._rotateFigure({
+      ...args,
+      draw: () => {
+        // Create the combined path for the outer and inner circles
+        const pathData =
+          `M ${x + size} ${y + size}` + // Start at the bottom-right sharp corner
+          `H ${x + size - radius}` + // Draw a horizontal line to the left
+          `A ${radius} ${radius} 0 0 1 ${x} ${y + size - radius}` + // Draw the bottom-left arc
+          `A ${radius} ${radius} 0 0 1 ${x + radius} ${y}` + // Draw the top-left arc
+          `A ${radius} ${radius} 0 0 1 ${x + size} ${y + radius}` + // Draw the top-right arc
+          `V ${y + size}` + // Draw a vertical line down to the starting point
+          `Z` + // Close the outer path
+          `M ${innerX + innerRadius * 2} ${innerY + innerRadius * 2}` + // Start at the bottom-right sharp corner of the inner circle
+          `H ${innerX + innerRadius}` + // Draw a horizontal line to the left
+          `A ${innerRadius} ${innerRadius} 0 0 1 ${innerX} ${innerY + innerRadius}` + // Draw the bottom-left arc
+          `A ${innerRadius} ${innerRadius} 0 0 1 ${innerX + innerRadius} ${innerY}` + // Draw the top-left arc
+          `A ${innerRadius} ${innerRadius} 0 0 1 ${innerX + innerRadius * 2} ${innerY + innerRadius}` + // Draw the top-right arc
+          `V ${innerY + innerRadius * 2}` + // Draw a vertical line down to the starting point
+          `Z`; // Close the inner path
+
+        this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path");
+        this._element.setAttribute("clip-rule", "evenodd");
+        this._element.setAttribute("d", pathData);
+        this._element.setAttribute("fill", "none"); // Set fill to none for the outer shape
+        this._element.setAttribute("stroke", "black"); // Set the stroke color
+        this._element.setAttribute("stroke-width", "1"); // Set the stroke width
+
+        // Create the inner circle path
+        const innerPath = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path");
+        innerPath.setAttribute("clip-rule", "evenodd");
+        innerPath.setAttribute(
+          "d",
+          `M ${innerX + innerRadius * 2} ${innerY + innerRadius * 2}` + // Start at the bottom-right sharp corner
+            `H ${innerX + innerRadius}` + // Draw a horizontal line to the left
+            `A ${innerRadius} ${innerRadius} 0 0 1 ${innerX} ${innerY + innerRadius}` + // Draw the bottom-left arc
+            `A ${innerRadius} ${innerRadius} 0 0 1 ${innerX + innerRadius} ${innerY}` + // Draw the top-left arc
+            `A ${innerRadius} ${innerRadius} 0 0 1 ${innerX + innerRadius * 2} ${innerY + innerRadius}` + // Draw the top-right arc
+            `V ${innerY + innerRadius * 2}` + // Draw a vertical line down to the starting point
+            `Z`
+        );
+        innerPath.setAttribute("transform", `rotate(${(rotation * 180) / Math.PI}, ${cx}, ${cy})`);
+        innerPath.setAttribute("fill", "white"); // Set fill to white for the inner circle
+
+        // Append the elements to the SVG container
+        this._element.appendChild(innerPath);
+      }
+    });
+  }
+
+  _basicPeanutShape(args: BasicFigureDrawArgs): void {
+    const { size, x, y, rotation = 0 } = args;
+    const radius = size / 2.2; // Adjust this value to control the rounding radius
+    const innerSquareSize = size / 1.4; // Size of the inner square
+    const innerSquareRadius = innerSquareSize / 2.2; // Radius for the inner square
+    const innerX = x + (size - innerSquareSize) / 2; // X position for the inner square
+    const innerY = y + (size - innerSquareSize) / 2; // Y position for the inner square
+
+    // Center coordinates for rotation
+    const cx = x + size / 2;
+    const cy = y + size / 2;
+
+    this._rotateFigure({
+      ...args,
+      draw: () => {
+        // Create the combined path for the outer and inner shapes
+        const pathData =
+          `M ${x + radius} ${y}` + // Start at the top-left flat edge
+          `H ${x + size - radius}` + // Draw a horizontal line to the right
+          `a ${radius} ${radius} 0 0 1 ${radius} ${radius}` + // Draw the top-right arc
+          `V ${y + size - radius}` + // Draw a vertical line down to the bottom-right flat edge
+          `a ${radius} ${radius} 0 0 1 -${radius} ${radius}` + // Draw the bottom-right arc
+          `H ${x + radius}` + // Draw a horizontal line to the left
+          `a ${radius} ${radius} 0 0 1 -${radius} -${radius}` + // Draw the bottom-left arc
+          `V ${y + radius}` + // Draw a vertical line up to the starting point
+          `a ${radius} ${radius} 0 0 1 ${radius} -${radius}` + // Draw the top-left arc
+          `Z` + // Close the outer path
+          `M ${innerX + innerSquareRadius} ${innerY}` + // Start at the top-left flat edge of the inner square
+          `H ${innerX + innerSquareSize - innerSquareRadius}` + // Draw a horizontal line to the right
+          `a ${innerSquareRadius} ${innerSquareRadius} 0 0 1 ${innerSquareRadius} ${innerSquareRadius}` + // Draw the top-right arc
+          `V ${innerY + innerSquareSize - innerSquareRadius}` + // Draw a vertical line down to the bottom-right flat edge
+          `a ${innerSquareRadius} ${innerSquareRadius} 0 0 1 -${innerSquareRadius} ${innerSquareRadius}` + // Draw the bottom-right arc
+          `H ${innerX + innerSquareRadius}` + // Draw a horizontal line to the left
+          `a ${innerSquareRadius} ${innerSquareRadius} 0 0 1 -${innerSquareRadius} -${innerSquareRadius}` + // Draw the bottom-left arc
+          `V ${innerY + innerSquareRadius}` + // Draw a vertical line up to the starting point
+          `a ${innerSquareRadius} ${innerSquareRadius} 0 0 1 ${innerSquareRadius} -${innerSquareRadius}` + // Draw the top-left arc
+          `Z`; // Close the inner path
+
+        this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path");
+        this._element.setAttribute("clip-rule", "evenodd");
+        this._element.setAttribute("d", pathData);
+        this._element.setAttribute("fill", "none"); // Set fill to none for the outer shape
+        this._element.setAttribute("stroke", "black"); // Set the stroke color
+        this._element.setAttribute("stroke-width", "1"); // Set the stroke width
+
+        // Create the inner shape path
+        const innerPath = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path");
+        innerPath.setAttribute("clip-rule", "evenodd");
+        innerPath.setAttribute(
+          "d",
+          `M ${innerX + innerSquareRadius} ${innerY}` + // Start at the top-left flat edge
+            `H ${innerX + innerSquareSize - innerSquareRadius}` + // Draw a horizontal line to the right
+            `a ${innerSquareRadius} ${innerSquareRadius} 0 0 1 ${innerSquareRadius} ${innerSquareRadius}` + // Draw the top-right arc
+            `V ${innerY + innerSquareSize - innerSquareRadius}` + // Draw a vertical line down to the bottom-right flat edge
+            `a ${innerSquareRadius} ${innerSquareRadius} 0 0 1 -${innerSquareRadius} ${innerSquareRadius}` + // Draw the bottom-right arc
+            `H ${innerX + innerSquareRadius}` + // Draw a horizontal line to the left
+            `a ${innerSquareRadius} ${innerSquareRadius} 0 0 1 -${innerSquareRadius} -${innerSquareRadius}` + // Draw the bottom-left arc
+            `V ${innerY + innerSquareRadius}` + // Draw a vertical line up to the starting point
+            `a ${innerSquareRadius} ${innerSquareRadius} 0 0 1 ${innerSquareRadius} -${innerSquareRadius}` + // Draw the top-left arc
+            `Z`
+        );
+        innerPath.setAttribute("transform", `rotate(${(rotation * 180) / Math.PI}, ${cx}, ${cy})`);
+        innerPath.setAttribute("fill", "white"); // Set fill to white for the inner shape
+
+        // Append the elements to the SVG container
+        this._element.appendChild(innerPath);
+      }
+    });
+  }
+
+  _basicCircleInSquare(args: BasicFigureDrawArgs): void {
+    const { size, x, y } = args;
+    const borderWidth = size / 4; // Adjust the border width as needed
+    const circleRadius = size / 2 - borderWidth / 2;
+  
+    this._rotateFigure({
+      ...args,
+      draw: () => {
+        this._element = this._window.document.createElementNS(
+          "http://www.w3.org/2000/svg",
+          "path"
+        );
+        this._element.setAttribute("clip-rule", "evenodd");
+        this._element.setAttribute("fill", "none"); // No fill for the square and circle
+        this._element.setAttribute(
+          "d",
+          `M ${x} ${y}` +
+            `h ${size}` +
+            `v ${size}` +
+            `h ${-size}` +
+            `z` + // Outer square border
+            `M ${x + size / 2}, ${y + size / 2}` +
+            `m -${circleRadius}, 0` +
+            `a ${circleRadius},${circleRadius} 0 1,0 ${2 * circleRadius},0` +
+            `a ${circleRadius},${circleRadius} 0 1,0 -${2 * circleRadius},0` // Circle in the center
+        );
+      }
+    });
+  }
+  
+  
+
   _drawDot({ x, y, size, rotation }: DrawArgs): void {
     this._basicDot({ x, y, size, rotation });
   }
@@ -133,4 +559,32 @@ export default class QRCornerSquare {
   _drawExtraRounded({ x, y, size, rotation }: DrawArgs): void {
     this._basicExtraRounded({ x, y, size, rotation });
   }
+
+  _drawDottedSquare({ x, y, size, rotation }: DrawArgs): void {
+    this._basicDottedSquare({ x, y, size, rotation });
+  }
+
+  _drawRoundedSquareRightBottomEdge({ x, y, size, rotation }: DrawArgs): void {
+    this._basicRoundedSquareRightBottomEdge({ x, y, size, rotation });
+  }
+
+  _drawRoundedSquareLeftTopEdge({ x, y, size, rotation }: DrawArgs): void {
+    this._basicRoundedSquareLeftTopEdge({ x, y, size, rotation });
+  }
+
+  _drawCircleInSquare({ x, y, size, rotation }: DrawArgs): void {
+    this._basicCircleInSquare({ x, y, size, rotation });
+  }
+
+  _drawCircleLeftTopFlat({ x, y, size, rotation }: DrawArgs): void {
+    this._basicLeftTopCircle({ x, y, size, rotation });
+  }
+
+  _drawCircleRightBottomFlat({ x, y, size, rotation }: DrawArgs): void {
+    this._basicRightBottomCircle({ x, y, size, rotation });
+  }
+
+  _drawPeanutShape({ x, y, size, rotation }: DrawArgs): void {
+    this._basicPeanutShape({ x, y, size, rotation });
+  }
 }
diff --git a/src/index.html b/src/index.html
index c734b65..a2d7b1a 100644
--- a/src/index.html
+++ b/src/index.html
@@ -1,169 +1,223 @@
-<!DOCTYPE html>
+<!doctype html>
 <html lang="en">
-<head>
-  <meta charset="UTF-8">
-  <title>QR Code Styling</title>
-</head>
-<body>
-<div id="canvas1"></div>
-<div id="canvas2"></div>
-<div id="canvas3"></div>
-<script type="text/javascript">
-  const options1 = {
-    width: 300,
-    height: 500,
-    type: "svg",
-    data: "https://www.facebook.com/",
-    image: "https://upload.wikimedia.org/wikipedia/commons/5/51/Facebook_f_logo_%282019%29.svg",
-    dotsOptions: {
-      color: "#4267b2",
-      type: "rounded",
-      roundSize: false,
-    },
-    backgroundOptions: {
-      color: "#e9ebee",
-    },
-    imageOptions: {
-      crossOrigin: "anonymous",
-      margin: 20
-    }
-  };
-  const options2 = {
-    width: 500,
-    height: 700,
-    type: "svg",
-    data: "h",
-    image: "https://upload.wikimedia.org/wikipedia/commons/5/51/Facebook_f_logo_%282019%29.svg",
-    dotsOptions: {
-      type: "extra-rounded",
-      roundSize: false,
+  <head>
+    <meta charset="UTF-8" />
+    <title>QR Code Styling Custom</title>
+  </head>
+  <body>
+    <div id="canvas1"></div>
+    <div id="canvas2"></div>
+    <div id="canvas3"></div>
+    <button id="btn-svg">Download SVG</button>
+    <button id="btn-png">Download PNG</button>
+    <button id="btn-pdf">Download PDF</button>
+    <script type="text/javascript">
+      const options1 = {
+        width: 300,
+        height: 300,
+        type: "svg",
+        data: "https://www.facebook.com/",
+        image: "https://upload.wikimedia.org/wikipedia/commons/5/51/Facebook_f_logo_%282019%29.svg",
+        dotsOptions: {
+          color: "#000000",
+          type: "rounded",
+          roundSize: false
+        },
+        cornersDotOptions: {
+          type: "dot",
+          color: "#4267b2"
+        },
+        cornersSquareOptions: {
+          type: "circle-in-square",
+          color: "#4267b2"
+        },
+        backgroundOptions: {
+          color: "#e9ebee"
+        },
+        imageOptions: {
+          crossOrigin: "anonymous",
+          margin: 20
+        }
+      };
+      // const options2 = {
+      //   width: 500,
+      //   height: 700,
+      //   type: "svg",
+      //   data: "h",
+      //   image: "https://upload.wikimedia.org/wikipedia/commons/5/51/Facebook_f_logo_%282019%29.svg",
+      //   dotsOptions: {
+      //     type: "extra-rounded",
+      //     roundSize: false,
 
-      gradient: {
-        type: "linear", //radial,
-        rotation: Math.PI / 2,
-        colorStops: [{ offset: 0, color: 'black' }, { offset: 1, color: 'green' }]
-      },
-    },
-    cornersSquareOptions: {
-      type: "rounded",
-      gradient: {
-        type: "linear",
-        rotation: Math.PI / 2,
-        colorStops: [{
-          offset: 0,
-          color: 'black'
-        }, {
-          offset: 1,
-          color: 'red'
-        }]
-      },
-    },
-    cornersDotOptions: {
-      type: "rounded",
-      gradient: {
-        type: "linear",
-        rotation: Math.PI / 2,
-        colorStops: [{
-          offset: 0,
-          color: 'black'
-        }, {
-          offset: 1,
-          color: 'red'
-        }]
-      },
-    },
-    backgroundOptions: {
-      gradient: {
-        type: "linear",
-        rotation: Math.PI / 2,
-        colorStops: [{
-          offset: 0,
-          color: 'white'
-        }, {
-          offset: 1,
-          color: 'red'
-        }]
-      },
-    },
-    imageOptions: {
-      crossOrigin: "anonymous",
-      margin: 30
-    }
-  };
-  const options3 = {
-    width: 500,
-    height: 500,
-    type: "svg",
-    data: "h",
-    image: "https://upload.wikimedia.org/wikipedia/commons/5/51/Facebook_f_logo_%282019%29.svg",
-    dotsOptions: {
-      roundSize: false,
+      //     gradient: {
+      //       type: "linear", //radial,
+      //       rotation: Math.PI / 2,
+      //       colorStops: [
+      //         { offset: 0, color: "black" },
+      //         { offset: 1, color: "green" }
+      //       ]
+      //     }
+      //   },
+      //   cornersSquareOptions: {
+      //     type: "rounded",
+      //     gradient: {
+      //       type: "linear",
+      //       rotation: Math.PI / 2,
+      //       colorStops: [
+      //         {
+      //           offset: 0,
+      //           color: "black"
+      //         },
+      //         {
+      //           offset: 1,
+      //           color: "red"
+      //         }
+      //       ]
+      //     }
+      //   },
+      //   cornersDotOptions: {
+      //     type: "rounded",
+      //     gradient: {
+      //       type: "linear",
+      //       rotation: Math.PI / 2,
+      //       colorStops: [
+      //         {
+      //           offset: 0,
+      //           color: "black"
+      //         },
+      //         {
+      //           offset: 1,
+      //           color: "red"
+      //         }
+      //       ]
+      //     }
+      //   },
+      //   backgroundOptions: {
+      //     gradient: {
+      //       type: "linear",
+      //       rotation: Math.PI / 2,
+      //       colorStops: [
+      //         {
+      //           offset: 0,
+      //           color: "white"
+      //         },
+      //         {
+      //           offset: 1,
+      //           color: "red"
+      //         }
+      //       ]
+      //     }
+      //   },
+      //   imageOptions: {
+      //     crossOrigin: "anonymous",
+      //     margin: 30
+      //   }
+      // };
+      // const options3 = {
+      //   width: 500,
+      //   height: 500,
+      //   type: "svg",
+      //   data: "h",
+      //   image: "https://upload.wikimedia.org/wikipedia/commons/5/51/Facebook_f_logo_%282019%29.svg",
+      //   dotsOptions: {
+      //     roundSize: false,
 
-      type: "extra-rounded",
-      gradient: {
-        type: "radial", //radial,
-        rotation: Math.PI / 2,
-        colorStops: [{ offset: 0, color: 'black' }, { offset: 1, color: 'green' }]
-      },
-    },
-    cornersSquareOptions: {
-      type: "rounded",
-      gradient: {
-        type: "radial",
-        rotation: Math.PI / 2,
-        colorStops: [{
-          offset: 0,
-          color: 'black'
-        }, {
-          offset: 1,
-          color: 'red'
-        }]
-      },
-    },
-    cornersDotOptions: {
-      type: "rounded",
-      gradient: {
-        type: "radial",
-        rotation: Math.PI / 2,
-        colorStops: [{
-          offset: 0,
-          color: 'black'
-        }, {
-          offset: 1,
-          color: 'red'
-        }]
-      },
-    },
-    backgroundOptions: {
-      gradient: {
-        type: "radial",
-        rotation: Math.PI / 2,
-        colorStops: [{
-          offset: 0,
-          color: 'white'
-        }, {
-          offset: 1,
-          color: 'red'
-        }]
-      },
-    },
-    imageOptions: {
-      crossOrigin: "anonymous",
-      margin: 30
-    }
-  };
-  const qrCode1 = new QRCodeStyling(options1);
-  const qrCode2 = new QRCodeStyling(options2);
-  const qrCode3 = new QRCodeStyling(options3);
+      //     type: "extra-rounded",
+      //     gradient: {
+      //       type: "radial", //radial,
+      //       rotation: Math.PI / 2,
+      //       colorStops: [
+      //         { offset: 0, color: "black" },
+      //         { offset: 1, color: "green" }
+      //       ]
+      //     }
+      //   },
+      //   cornersSquareOptions: {
+      //     type: "rounded",
+      //     gradient: {
+      //       type: "radial",
+      //       rotation: Math.PI / 2,
+      //       colorStops: [
+      //         {
+      //           offset: 0,
+      //           color: "black"
+      //         },
+      //         {
+      //           offset: 1,
+      //           color: "red"
+      //         }
+      //       ]
+      //     }
+      //   },
+      //   cornersDotOptions: {
+      //     type: "rounded",
+      //     gradient: {
+      //       type: "radial",
+      //       rotation: Math.PI / 2,
+      //       colorStops: [
+      //         {
+      //           offset: 0,
+      //           color: "black"
+      //         },
+      //         {
+      //           offset: 1,
+      //           color: "red"
+      //         }
+      //       ]
+      //     }
+      //   },
+      //   backgroundOptions: {
+      //     gradient: {
+      //       type: "radial",
+      //       rotation: Math.PI / 2,
+      //       colorStops: [
+      //         {
+      //           offset: 0,
+      //           color: "white"
+      //         },
+      //         {
+      //           offset: 1,
+      //           color: "red"
+      //         }
+      //       ]
+      //     }
+      //   },
+      //   imageOptions: {
+      //     crossOrigin: "anonymous",
+      //     margin: 30
+      //   }
+      // };
+      const qrCode1 = new QRCodeStyling(options1);
+      // const qrCode2 = new QRCodeStyling({ ...options1, type: "png" });
+      // const qrCode3 = new QRCodeStyling(options3);
 
-  qrCode1.append(document.getElementById("canvas1"));
-  qrCode2.append(document.getElementById("canvas2"));
-  qrCode3.append(document.getElementById("canvas3"));
+      qrCode1.append(document.getElementById("canvas1"));
+      // qrCode2.append(document.getElementById("canvas2"));
+      // qrCode3.append(document.getElementById("canvas3"));
 
-  // qrCode1.download({ name: 'qr-codes/Vanbilloen'+'-color', extension: 'svg' })
-  // qrCode2.download({ name: 'qr-codes/Vanbilloen'+'-linear', extension: 'svg' })
-  // qrCode3.download({ name: 'qr-codes/Vanbilloen'+'-rounded', extension: 'svg' })
-</script>
-</body>
-</html>
+      function updateQRCodeStyling(type) {
+        qrCode1.update({ ...options1, type });
+      }
+
+      // Button event listeners
+      document.getElementById("btn-svg").addEventListener("click", () => {
+        updateQRCodeStyling("svg");
+        qrCode1.download({ name: "qr-code", extension: "svg" });
+      });
+
+      document.getElementById("btn-png").addEventListener("click", () => {
+        updateQRCodeStyling("canvas");
+        qrCode1.download({ name: "qr-code", extension: "png" });
+      });
 
+      document.getElementById("btn-pdf").addEventListener("click", () => {
+        updateQRCodeStyling("canvas");
+        qrCode1.download({ name: "qr-code", extension: "pdf" });
+      });
+
+      // qrCode1.download({ name: 'qr-codes/Vanbilloen'+'-color', extension: 'svg' })
+      // qrCode2.download({ name: 'qr-codes/Vanbilloen'+'-linear', extension: 'svg' })
+      // qrCode3.download({ name: 'qr-codes/Vanbilloen'+'-rounded', extension: 'svg' })
+    </script>
+  </body>
+</html>
diff --git a/src/types/index.ts b/src/types/index.ts
index c95e719..8164a27 100644
--- a/src/types/index.ts
+++ b/src/types/index.ts
@@ -1,5 +1,5 @@
 import { DOMWindow, JSDOM } from "jsdom";
-import nodeCanvas  from "canvas";
+import nodeCanvas from "canvas";
 
 export interface UnknownObject {
   // eslint-disable-next-line @typescript-eslint/no-explicit-any
@@ -7,8 +7,32 @@ export interface UnknownObject {
 }
 
 export type DotType = "dots" | "rounded" | "classy" | "classy-rounded" | "square" | "extra-rounded";
-export type CornerDotType = "dot" | "square";
-export type CornerSquareType = "dot" | "square" | "extra-rounded";
+export type CornerDotType =
+  | "dot"
+  | "square"
+  | "star"
+  | "plus"
+  | "square-rounded"
+  | "leaf"
+  | "circle-left-top"
+  | "circle-right-bottom"
+  | "square-right-bottom"
+  | "diamond"
+  | "cross"
+  | "rhombus"
+  | "square-grid";
+export type CornerSquareType =
+  | "dot"
+  | "square"
+  | "extra-rounded"
+  | "dotted-square"
+  | "right-bottom-square"
+  | "left-top-square"
+  | "circle-in-square"
+  | "circle-left-top"
+  | "circle-right-bottom"
+  | "peanut"
+  | "paragonal";
 export type FileExtension = "svg" | "png" | "jpeg" | "webp";
 export type GradientType = "radial" | "linear";
 export type DrawType = "canvas" | "svg";
